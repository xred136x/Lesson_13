Задание 1: Система хранения данных
Вам необходимо разработать простую систему хранения данных, которая позволит хранить и обрабатывать различные типы данных. В рамках данной системы будет использоваться обобщенные типы для достижения гибкости и повторного использования кода.

Описание задания
Создайте обобщенный класс DataStorage<T>, который будет представлять систему хранения данных. В этом классе должны быть следующие методы:

void AddData(T data): метод для добавления данных в систему.
void RemoveData(T data): метод для удаления данных из системы.
bool ContainsData(T data): метод для проверки наличия данных в системе.
void PrintData(): метод для печати всех данных в системе.
Реализуйте классы Person и Product, которые представляют сущности для хранения. Классы должны иметь свойства и конструкторы по умолчанию. Например:
public class Person
{
    public string Name { get; set; }
    public int Age { get; set; }
}

public class Product
{
    public string Name { get; set; }
    public decimal Price { get; set; }
}
Создайте несколько экземпляров классов Person и Product.

Создайте экземпляр класса DataStorage<T>, где T - это тип данных, который вы хотите хранить.

Добавьте созданные экземпляры в систему хранения данных при помощи метода AddData().

Проверьте наличие данных в системе при помощи метода ContainsData().

Удалите некоторые данные из системы при помощи метода RemoveData().

Напечатайте все данные в системе при помощи метода PrintData().


Задание 2:
У тебя есть список студентов. Каждый студент представлен объектом класса Student, содержащего следующие свойства:

class Student
{
    public string Name { get; set; }
    public int Age { get; set; }
    public string Gender { get; set; }
    public string Major { get; set; }
    public List<string> Subjects { get; set; }
}
Твоя задача:

Создать список студентов, содержащий не менее 10 элементов.
Найти и вывести на экран всех студентов мужского пола.
Найти и вывести на экран всех студентов, чья возрастная категория попадает в диапазон от 20 до 25 лет.
Найти и вывести на экран количество студентов по каждой специальности (Major).
Найти и вывести на экран все уникальные предметы, которые изучают студенты.
Найти и вывести на экран студента с наибольшим количеством изучаемых предметов.
Требования:

Используй LINQ-запросы или методы расширений LINQ для решения каждой подзадачи.
Не забудь добавить пример заполнения списка студентов для проверки решения.